import java_cup.runtime.Symbol;
import syntaxtree.*;
import java.util.*;

action code {:
    public Program goal;
:}

parser code {:
    public Program getGoal() {
        return action_obj.goal;
    }
:}

/* ---------- TERMINALS ---------- */

/* structure */
terminal Symbol SEMICOLON, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET;

/* operators */
terminal Symbol PLUS, MINUS, TIMES, LESSTHAN, AND, NOT;
terminal Symbol DOT, COMMA, ASSIGNMENT;

/* keywords/types */
terminal Symbol IF, ELSE, WHILE, RETURN, INT, BOOLEAN, STRING;
terminal Symbol TRUE, FALSE, CLASS, PUBLIC, STATIC, VOID;
terminal Symbol THIS, NEW, MAIN, EXTENDS, LENGTH, PRINT;

/* ids/literals */
terminal IntegerLiteral INT_LITERAL;
terminal Identifier ID;

/* ---------- NON-TERMINALS ---------- */
non terminal Program goal;
non terminal MainClass main_class;
non terminal ClassDecl class_declaration;
non terminal ClassDeclList class_list;
non terminal MethodDecl method_declaration;
non terminal MethodDeclList method_list;
non terminal Formal formal;
non terminal FormalList formal_list, formal_list2;
non terminal VarDecl var_declaration;
non terminal VarDeclList var_list;
non terminal Type type;
non terminal Statement statement;
non terminal StatementList statement_list;
non terminal Exp expression;
non terminal ExpList exp_list, exp_list2;

/* ---------- PRECEDENCES ---------- */
precedence nonassoc ID, RETURN, LBRACE, IF, WHILE, RETURN, PRINT;

precedence right ASSIGNMENT;
precedence left AND;
precedence nonassoc LESSTHAN;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence right NEW;
precedence right NOT;
precedence left DOT, LBRACKET, RBRACKET, LPAREN, RPAREN;

/* ---------- GRAMMAR ---------- */
start with goal;

goal ::=
    main_class:am class_list:acl
    {:
        goal = new Program(am, acl, am.l, am.c);
        RESULT = goal;
    :}
    ;

main_class ::=
    CLASS:ac ID:ai1 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID:ai2 RPAREN LBRACE statement:as RBRACE RBRACE
    {:
        RESULT = new MainClass(ai1, ai2, as, acleft, acright);
    :}
    ;

class_list ::=
    class_list:acl class_declaration:acd
    {:
        acl.addElement(acd);
        RESULT = acl;
    :}
    |
    {: RESULT = new ClassDeclList(); :}
    ;

class_declaration ::=
    CLASS:ac ID:ai LBRACE var_list:avl1 method_list:aml1 RBRACE
    {:
        RESULT = new ClassDeclSimple(ai, avl1, aml1, acleft, acright);
    :}
    | CLASS:ac ID:ai1 EXTENDS ID:ai2 LBRACE var_list:avl2 method_list:aml2 RBRACE
    {:
        RESULT = new ClassDeclExtends(ai1, ai2, avl2, aml2, acleft, acright);
    :}
    ;

method_list ::=
    method_list:aml method_declaration:amd
    {:
        aml.addElement(amd);
        RESULT = aml;
    :}
    |
    {: RESULT = new MethodDeclList(); :}
    ;

method_declaration ::=
    PUBLIC:ap type:at ID:ai LPAREN formal_list:afl RPAREN LBRACE var_list:avl statement_list:asl RETURN expression:ae SEMICOLON RBRACE
    {:
        RESULT = new MethodDecl(at, ai, afl, avl, asl, ae, apleft, apright);
    :}
    | PUBLIC:ap type:at ID:ai LPAREN formal_list:afl RPAREN LBRACE var_list:avl RETURN expression:ae SEMICOLON RBRACE
    {:
        RESULT = new MethodDecl(at, ai, afl, avl, new StatementList(), ae, apleft, apright);
    :}
    ;

formal_list ::=
    formal_list2:afl
    {: RESULT = afl; :}
    |
    {: RESULT = new FormalList(); :}
    ;

formal_list2 ::=
    formal:af
    {:
        FormalList afl = new FormalList();
        afl.addElement(af);
        RESULT = afl;
    :}
    | formal_list2:afl COMMA formal:af
    {:
        afl.addElement(af);
        RESULT = afl;
    :}
    ;

formal ::=
    type:at ID:ai
    {: RESULT = new Formal(at, ai, at.l, at.c); :}
    ;

var_list ::=
    var_list:avl var_declaration:avd
    {:
        avl.addElement(avd);
        RESULT = avl;
    :}
    |
    {: RESULT = new VarDeclList(); :}
    ;

var_declaration ::= type:at ID:ai SEMICOLON
    {: RESULT = new VarDecl(at, ai, at.l, at.c); :}
    ;

type ::=
    INT:ai LBRACKET RBRACKET
    {: RESULT = new IntArrayType(aileft, airight); :}
    | BOOLEAN:ab
    {: RESULT = new BooleanType(ableft, abright); :}
    | INT:ai
    {: RESULT = new IntegerType(aileft, airight); :}
    | ID:as
    {: RESULT = new IdentifierType(as.s, as.l, as.c); :}
    ;

statement_list ::=
    statement_list:asl statement:as
    {:
        asl.addElement(as);
        RESULT = asl;
    :}
    | statement:as
    {:
        StatementList sl = new StatementList();
        sl.addElement(as);
        RESULT = sl;
    :}
    ;

statement ::=
    LBRACE:al statement_list:asl RBRACE
    {: RESULT = new Block(asl, alleft, alright); :}
    | LBRACE:al RBRACE
    {: RESULT = new Block(new StatementList(), alleft, alright); :}
    | IF:ai LPAREN expression:ae RPAREN statement:as1 ELSE statement:as2
    {: RESULT = new If(ae, as1, as2, aileft, airight); :}
    | WHILE:aw LPAREN expression:ae RPAREN statement:as
    {: RESULT = new While(ae, as, awleft, awright); :}
    | PRINT:ap LPAREN expression:ae RPAREN SEMICOLON
    {: RESULT = new Print(ae, apleft, apright); :}
    | ID:ai ASSIGNMENT expression:ae SEMICOLON
    {: RESULT = new Assign(ai, ae, ai.l, ai.c); :}
    | ID:ai LBRACKET expression:ae1 RBRACKET ASSIGNMENT expression:ae2 SEMICOLON
    {: RESULT = new ArrayAssign(ai, ae1, ae2, ai.l, ai.c); :}
    ;

expression ::=
    expression:ae1 AND expression:ae2
    {: RESULT = new And(ae1, ae2, ae1.l, ae1.c); :}
    | expression:ae1 LESSTHAN expression:ae2
    {: RESULT = new LessThan(ae1, ae2, ae1.l, ae1.c); :}
    | expression:ae1 PLUS expression:ae2
    {: RESULT = new Plus(ae1, ae2, ae1.l, ae1.c); :}
    | expression:ae1 MINUS expression:ae2
    {: RESULT = new Minus(ae1, ae2, ae1.l, ae1.c); :}
    | expression:ae1 TIMES expression:ae2
    {: RESULT = new Times(ae1, ae2, ae1.l, ae1.c); :}
    | expression:ae1 LBRACKET expression:ae2 RBRACKET
    {: RESULT = new ArrayLookup(ae1, ae2, ae1.l, ae1.c); :}
    | expression:ae DOT LENGTH
    {: RESULT = new ArrayLength(ae, ae.l, ae.c); :}
    | expression:ae DOT ID:ai LPAREN exp_list:ael RPAREN
    {: RESULT = new Call(ae, ai, ael, ae.l, ae.c); :}
    | INT_LITERAL:ai
    {: RESULT = ai; :}
    | TRUE:at
    {: RESULT = new True(atleft, atright); :}
    | FALSE:af
    {: RESULT = new False(afleft, afright); :}
    | ID:ai
    {: RESULT = new IdentifierExp(ai.s, ai.l, ai.c); :}
    | THIS:at
    {: RESULT = new This(atleft, atright); :}
    | NEW:an INT LBRACKET expression:ae RBRACKET
    {: RESULT = new NewArray(ae, anleft, anright); :}
    | NEW:an ID:ai LPAREN RPAREN
    {: RESULT = new NewObject(ai, anleft, anright); :}
    | NOT:an expression:ae
    {: RESULT = new Not(ae, anleft, anright); :}
    | LPAREN expression:ae RPAREN
    {: RESULT = ae; :}
    ;

exp_list ::=
    exp_list2:ael
    {: RESULT = ael; :}
    |
    {: RESULT = new ExpList(); :}
    ;

exp_list2 ::=
    expression:ae
    {:
        ExpList ael = new ExpList();
        ael.addElement(ae);
        RESULT = ael;
    :}
    | exp_list2:ael COMMA expression:ae
    {:
        ael.addElement(ae);
        RESULT = ael;
    :}
    ;
